Emi Hammond
eth14


StringBuilderStrand Benchmark Results
dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                		splicee	      recomb	time	appends
-----
StringBuilderStrand:	            256	      4,800,471	0.039	1290
StringBuilderStrand:	            512	      4,965,591	0.018	1290
StringBuilderStrand:	          1,024	      5,295,831	0.007	1290
StringBuilderStrand:	          2,048	      5,956,311	0.005	1290
StringBuilderStrand:	          4,096	      7,277,271	0.005	1290
StringBuilderStrand:	          8,192	      9,919,191	0.007	1290
StringBuilderStrand:	         16,384	     15,203,031	0.011	1290
StringBuilderStrand:	         32,768	     25,770,711	0.035	1290
StringBuilderStrand:	         65,536	     46,906,071	0.057	1290
StringBuilderStrand:	        131,072	     89,176,791	0.096	1290
StringBuilderStrand:	        262,144	    173,718,231	0.151	1290
StringBuilderStrand:	        524,288	    342,801,111	0.298	1290
StringBuilderStrand:	      1,048,576	    680,966,871	0.471	1290

StringStrand Benchmark Results
dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
StringStrand:	            256	      4,800,471	0.506	1290
StringStrand:	            512	      4,965,591	0.484	1290
StringStrand:	          1,024	      5,295,831	0.530	1290
StringStrand:	          2,048	      5,956,311	0.597	1290
StringStrand:	          4,096	      7,277,271	0.747	1290
StringStrand:	          8,192	      9,919,191	1.046	1290
StringStrand:	         16,384	     15,203,031	1.690	1290
StringStrand:	         32,768	     25,770,711	3.450	1290
StringStrand:	         65,536	     46,906,071	7.235	1290
StringStrand:	        131,072	     89,176,791	11.707	1290
StringStrand:	        262,144	    173,718,231	23.685	1290
StringStrand:	        524,288	    342,801,111	52.389	1290
StringStrand:	      1,048,576	    680,966,871	88.264	1290

LinkStrand Benchmark Results
dna length = 4,639,221
cutting at enzyme gaattc
-----
Class	                splicee	      recomb	time	appends
-----
LinkStrand:	            256	      4,800,471	0.023	1290
LinkStrand:	            512	      4,965,591	0.018	1290
LinkStrand:	          1,024	      5,295,831	0.003	1290
LinkStrand:	          2,048	      5,956,311	0.004	1290
LinkStrand:	          4,096	      7,277,271	0.004	1290
LinkStrand:	          8,192	      9,919,191	0.004	1290
LinkStrand:	         16,384	     15,203,031	0.008	1290
LinkStrand:	         32,768	     25,770,711	0.004	1290
LinkStrand:	         65,536	     46,906,071	0.004	1290
LinkStrand:	        131,072	     89,176,791	0.011	1290
LinkStrand:	        262,144	    173,718,231	0.004	1290
LinkStrand:	        524,288	    342,801,111	0.005	1290
LinkStrand:	      1,048,576	    680,966,871	0.006	1290
LinkStrand:	      2,097,152	  1,357,298,391	0.005	1290
LinkStrand:	      4,194,304	  2,709,961,431	0.004	1290
LinkStrand:	      8,388,608	  5,415,287,511	0.004	1290
LinkStrand:	     16,777,216	 10,825,939,671	0.005	1290
LinkStrand:	     33,554,432	 21,647,243,991	0.004	1290
LinkStrand:	     67,108,864	 43,289,852,631	0.004	1290
LinkStrand:	    134,217,728	 86,575,069,911	0.005	1290
LinkStrand:	    268,435,456	173,145,504,471	0.006	1290
LinkStrand:	    536,870,912	346,286,373,591	0.005	1290
LinkStrand:	  1,073,741,824	692,568,111,831	0.007	1290


Questions:
1. Are the benchmark timings for StringStrand consistent with the explanation below that the time to execute 
cutAndSplice is O(b^2*S)? Note that the value of b is half the number of calls to append since each cut (except 
the first) is modeled by two calls of append in the method cutAndSplice -- see the code. This means that b2 
will be constant in the benchmark, but S will vary. 

The string stand timings are consistent with the prediction of O(b^2 * S) of cutAndSplice because the program 
iterates through the string once to identify the places to splice, and then iterates a second time to find where 
to insert the new strand and that's where the b^2 comes from. This is multiplied by S because the time is 
slightly dependent on the length of the string being inserted.


2. Are the benchmark timings for StringBuilderStrand consistent with the explanation below that the time to 
execute cutAndSplice is O(bS)? Note that the value of b is half the number of calls to append since each cut 
(except the first) is modeled by two calls of append in the method cutAndSplice -- see the code. This means 
that b will be constant in the benchmark, but S will vary. 

The results are somewhat consistent with O(bS). The relationship of timing does seem to be much more proportional 
than stringStrand. There are a few exceptions to this, especially in the earlier trials. However, the time 
seemed to increase somewhat linearly, supporting the O(bS) prediction.


3. Explain why the time for LinkStrand does not change much at all over all the runs in the benchmark program. 
Explain why you think memory is exhausted at the specific strand size you see in your timings -- as compared 
to exhaustion for String and StringBuilder.

The LinkStrand run does not change much time because the program is just a series of changing the directions of 
pointing arrows. There is no repeated iterations, so it can move through quite quickly. Java can only hold so 
much information, so after 1,073,741,824 splicees (with the other nucleotides in between), the maximum character 
limit is reached.

